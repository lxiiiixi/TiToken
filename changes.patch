diff --git a/FrontEnd/src/configs/constants.ts b/FrontEnd/src/configs/constants.ts
index 524e1a7..5e7302f 100644
--- a/FrontEnd/src/configs/constants.ts
+++ b/FrontEnd/src/configs/constants.ts
@@ -2,7 +2,8 @@ import buyandburn from "@/abis/buyandburn.json";
 import tokenManager from "@/abis/tokenManager.json";
 import token from "@/abis/token.json";
 
-export const SUPPORTED_CHAINS = [1, 168587773];
+// export const SUPPORTED_CHAINS = [1, 168587773];
+export const SUPPORTED_CHAINS = [168587773];
 
 export const BUYANDBURN_CONTRACT_CONFIG = {
     address: "0xD1Eb23B8a9AE7FE2426cf8093253fe17e4f604E8" as `0x${string}`,
diff --git a/FrontEnd/src/configs/utils.ts b/FrontEnd/src/configs/utils.ts
index ccef492..0788d30 100644
--- a/FrontEnd/src/configs/utils.ts
+++ b/FrontEnd/src/configs/utils.ts
@@ -21,7 +21,7 @@ export function timestampToDate(timestampBigInt: bigint) {
     const month = String(date.getMonth() + 1).padStart(2, "0"); // getMonth() 返回0-11
     const day = String(date.getDate()).padStart(2, "0");
 
-    return `${year}/${month}/${day}`;
+    return `${month}/${day}/${year}`;
 }
 
 export function formatPrice(price: number | bigint | string, decimalPlaces: number = 2) {
@@ -59,15 +59,37 @@ export function formatPrice(price: number | bigint | string, decimalPlaces: numb
     return formattedPrice;
 }
 
-export function formatPercentage(value: number | bigint) {
+/**
+ * 将数字转换为百分比形式字符串。
+ * @param {number} value 要转换的数字。
+ * @param {number} decimalPlaces 保留的小数位数，默认为2。
+ * @return {string} 转换后的百分比形式字符串。
+ */
+export function formatPercentage(
+    value: number | bigint,
+    needDivBps: boolean = true,
+    decimalPlaces: number = 2
+): string {
     const numericValue = typeof value === "bigint" ? Number(value) : value;
-
-    if (numericValue === 0) {
-        return "0.00 %";
+    const percentage = numericValue * 100;
+    if (needDivBps) {
+        return `${(percentage / PERCENT_BPS).toFixed(decimalPlaces)}%`;
     }
+    return `${percentage.toFixed(decimalPlaces)}%`;
+}
 
-    // 将值转换为基本的百分比形式
-    const percentage = numericValue / (PERCENT_BPS * 100);
-
-    return `${percentage.toFixed(2)} %`;
+/**
+ * 计算当前时间相对于开始和结束时间的进度。
+ *
+ * @param {number} mintStartTs 开始时间戳（秒级）。
+ * @param {number} maturityTs 结束时间戳（秒级）。
+ * @return {number} 当前进度，范围从0（未开始）到1（已结束），超出范围时按边界处理。
+ */
+export function calculateProgress(mintStartTs: number, maturityTs: number) {
+    const nowTs = Date.now() / 1000;
+    const totalDuration = maturityTs - mintStartTs;
+    const elapsedSinceStart = nowTs - mintStartTs;
+    let progress = elapsedSinceStart / totalDuration;
+    progress = Math.max(0, Math.min(1, progress));
+    return Math.round(progress * 100) / 100; // progress.toFixed(2);
 }
diff --git a/FrontEnd/src/configs/wagmi.ts b/FrontEnd/src/configs/wagmi.ts
index c0a7e8e..ab593ac 100644
--- a/FrontEnd/src/configs/wagmi.ts
+++ b/FrontEnd/src/configs/wagmi.ts
@@ -1,13 +1,15 @@
 import { http, createConfig } from "wagmi";
-import { blastSepolia, mainnet } from "wagmi/chains";
+// import { blastSepolia, mainnet } from "wagmi/chains";
+import { blastSepolia } from "wagmi/chains";
 import { injected, walletConnect } from "wagmi/connectors";
 import { PROJECT_ID } from "./envs";
 
 export const config = createConfig({
-    chains: [mainnet, blastSepolia],
+    chains: [ blastSepolia],
+    // chains: [mainnet, blastSepolia],
     connectors: [injected(), walletConnect({ projectId: PROJECT_ID })],
     transports: {
-        [mainnet.id]: http(),
+        // [mainnet.id]: http(),
         [blastSepolia.id]: http(),
     },
 });
diff --git a/FrontEnd/src/hooks/useReadTokenContract.ts b/FrontEnd/src/hooks/useReadTokenContract.ts
index 5815e1f..fb32a80 100644
--- a/FrontEnd/src/hooks/useReadTokenContract.ts
+++ b/FrontEnd/src/hooks/useReadTokenContract.ts
@@ -5,6 +5,7 @@ import {
     BUYANDBURN_CONTRACT_CONFIG,
 } from "@/configs/constants";
 import type { UserStakesInfo } from "@/pages/Stake";
+import { UserMint } from "@/configs/interfaces";
 
 export function useGetCurrentMintCost() {
     const { data: currentMintCost } = useReadContract({
@@ -169,6 +170,16 @@ export function useGetUserStakes() {
     return { userStakes: userStakes as UserStakesInfo[] };
 }
 
+export function useGetUserMints() {
+    const { data: userMints } = useReadContract({
+        ...TOKEN_MANAGER_CONTRACT_CONFIT,
+        functionName: "getUserMints", // Return all mints info of an address
+        args: [useAccount()?.address],
+    });
+
+    return { userMints: userMints ? (userMints as UserMint[]) : [] };
+}
+
 export function useGetUserETHClaimableTotal() {
     const { data: userETHClaimableTotal } = useReadContract({
         ...TOKEN_MANAGER_CONTRACT_CONFIT,
diff --git a/FrontEnd/src/hooks/useWriteTokenContract.ts b/FrontEnd/src/hooks/useWriteTokenContract.ts
index 852922e..3bbdc28 100644
--- a/FrontEnd/src/hooks/useWriteTokenContract.ts
+++ b/FrontEnd/src/hooks/useWriteTokenContract.ts
@@ -113,3 +113,27 @@ export function usePayouts() {
     };
     return { triggerPayouts, claimUserAvailableETHPayouts, claimUserAvailableETHBurnPool };
 }
+
+export function useClaimMint() {
+    const { writeContract } = useWriteContract();
+    const { address } = useAccount();
+
+    if (!address) return {};
+
+    const claimMint = (id: number) => {
+        writeContract({
+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+            functionName: "claimMint",
+            args: [id], // mint id
+        });
+    };
+
+    const batchClaimMint = () => {
+        writeContract({
+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+            functionName: "batchClaimMint",
+        });
+    };
+
+    return { claimMint, batchClaimMint };
+}
diff --git a/FrontEnd/src/pages/Mine/index.tsx b/FrontEnd/src/pages/Mine/index.tsx
index 352266a..1ae5a58 100644
--- a/FrontEnd/src/pages/Mine/index.tsx
+++ b/FrontEnd/src/pages/Mine/index.tsx
@@ -6,7 +6,11 @@ import CreateMiner from "./CreateMiner";
 import type { MinerInputData } from "@/hooks/useMiningCalculator";
 import { useWriteContract, useAccount, useBalance } from "wagmi";
 import { TOKEN_CONTRACT_CONFIT } from "@/configs/constants";
-import { useGetCurrentMintCost, useGetGlobalTRank } from "@/hooks/useReadTokenContract";
+import {
+    useGetCurrentMintCost,
+    useGetGlobalTRank,
+    useGetUserMints,
+} from "@/hooks/useReadTokenContract";
 import getMineInfoDisplay from "./getMineInfoDisplay";
 import NextDifficultIncrease from "@/sections/NextDifficultIncrease";
 import MinerTable from "@/sections/Table/MinerTable";
@@ -20,6 +24,8 @@ import { Tooltip } from "antd";
 import { QuestionCircleOutlined } from "@ant-design/icons";
 import { formatEther } from "viem";
 import { useStartMint } from "@/hooks/useWriteTokenContract";
+import { MintStatus, UserMint } from "@/configs/interfaces";
+import { calculateProgress, formatPercentage, formatPrice, timestampToDate } from "@/configs/utils";
 
 function Index() {
     const [minerData, setMinerData] = useState<MinerInputData>({
@@ -135,6 +141,69 @@ function Index() {
         setMinerData(data);
     };
 
+    const { userMints } = useGetUserMints();
+
+    const filterMints = (data: UserMint[], ethPrice: number, tokenPrice: bigint) => {
+        // const minerData = {
+        //     active: data.filter(i => i.mintInfo.status === MintStatus.ACTIVE),
+        //     claimed: data.filter(i => i.mintInfo.status === MintStatus.CLAIMED),
+        //     burned: data.filter(i => i.mintInfo.status === MintStatus.BURNED),
+        // };
+
+        console.log(ethPrice);
+
+        const activeData = data
+            .filter(i => i.mintInfo.status === MintStatus.ACTIVE)
+            .map(item => {
+                console.log(item.mintInfo.mintableTitan);
+                console.log(tokenPrice);
+
+                console.log(item.mintInfo.mintableTitan * tokenPrice);
+
+                const rewardTokenValue = formatEther(
+                    (item.mintInfo.mintableTitan * tokenPrice) / BigInt(1e18)
+                );
+                const costEthValue = ethPrice * Number(formatEther(item.mintInfo.mintCost));
+                const roi = (Number(rewardTokenValue) - costEthValue) / costEthValue;
+
+                const progress = calculateProgress(
+                    Number(item.mintInfo.mintStartTs),
+                    Number(item.mintInfo.maturityTs)
+                );
+
+                return {
+                    key: item.tRank.toString(),
+                    tRank: item.tRank.toString(),
+                    length: item.mintInfo.numOfDays.toString(),
+                    startDay: timestampToDate(item.mintInfo.mintStartTs),
+                    endDay: timestampToDate(item.mintInfo.maturityTs),
+                    power: item.mintInfo.mintPower.toString(),
+                    estToken: formatPrice(formatEther(item.mintInfo.mintableTitan)),
+                    tRankBonus: formatPrice(item.mintInfo.mintPowerBonus), // contract
+                    cost: formatPrice(formatEther(item.mintInfo.mintCost), 4),
+                    value: formatPrice(rewardTokenValue),
+                    roi: formatPercentage(roi, false),
+                    progress: progress, // 根据开始时间、当前时间、结束时间计算
+                    isClaimable: item.mintInfo.maturityTs < Date.now() / 1000,
+                    mintInfo: item.mintInfo,
+                    // share: item.tRank.toString(),
+                    // action: item.mintInfo.mintableTitan.toString(), // Claim button
+                };
+            });
+
+        return {
+            activeData,
+            claimedData: activeData.filter(item => item.isClaimable),
+            endedData: data.filter(
+                i =>
+                    i.mintInfo.status === MintStatus.CLAIMED ||
+                    i.mintInfo.status === MintStatus.BURNED
+            ),
+        };
+    };
+
+    const { activeData, claimedData } = filterMints(userMints, ethUsdPrice, tokenPrice || 0n);
+
     return (
         <div>
             <ContentWrapper title="Mine" subTitle="Create your TITAN X virtual miners">
@@ -175,26 +244,12 @@ function Index() {
                             ))}
                             <NextDifficultIncrease />
                         </CardBgWrapper>
-                        {/* <TCard number={2} className="w-full" />
-                        <div className="absolute-top w-[88%] py-[5%]">
-                            {mineInfoDisplay.map((item, index) => (
-                                <>
-                                    <TInfoGroup
-                                        key={item.key}
-                                        title={item.label}
-                                        data={item.content}
-                                    />
-                                    {index !== mineInfoDisplay.length - 1 && <Divider />}
-                                </>
-                            ))}
-                            <NextDifficultIncrease />
-                        </div> */}
                     </div>
                 </div>
                 <div className="mt-20">
                     <TTabs>
                         <TabPanel title="Active Miners">
-                            <MinerTable data={[]} />
+                            <MinerTable data={activeData} />
                         </TabPanel>
                         <TabPanel title="Claimable Miners">
                             <div>
@@ -214,7 +269,7 @@ function Index() {
                                     Batch Claim Finished Miners (Claims up to 100 at a time)
                                 </Button>
                             </div>
-                            <MinerTable data={[]} />
+                            <MinerTable data={claimedData} />
                         </TabPanel>
                         <TabPanel title="Ended Miners">
                             <MinerTable data={[]} />
diff --git a/FrontEnd/src/pages/Payouts/index.tsx b/FrontEnd/src/pages/Payouts/index.tsx
index 58fe897..de7272c 100644
--- a/FrontEnd/src/pages/Payouts/index.tsx
+++ b/FrontEnd/src/pages/Payouts/index.tsx
@@ -119,7 +119,7 @@ function Index() {
                 <Divider />
                 <div>
                     <p>Countdown</p>
-                    <Progress percent={countdownPercent[dayNum] / 10} />
+                    <Progress percent={countdownPercent[dayNum] / 10} status="active" />
                     <p>— Next Payout Day: {nextDay[dayNum].toString()}</p>
                 </div>
             </CardBgWrapper>
diff --git a/FrontEnd/src/sections/CountDownProgress.tsx b/FrontEnd/src/sections/CountDownProgress.tsx
index 5a9f0f7..89ea6b4 100644
--- a/FrontEnd/src/sections/CountDownProgress.tsx
+++ b/FrontEnd/src/sections/CountDownProgress.tsx
@@ -10,5 +10,5 @@ export default function CountDownProgress() {
     const oneDay = Number(SECONDS_IN_DAY * 1000);
     const percent = Math.round(100 - (gap * 100) / oneDay);
 
-    return <Progress percent={percent} />;
+    return <Progress percent={percent} status="active" />;
 }
diff --git a/FrontEnd/src/sections/Table/MinerTable.tsx b/FrontEnd/src/sections/Table/MinerTable.tsx
index efc7f0e..dbb4f37 100644
--- a/FrontEnd/src/sections/Table/MinerTable.tsx
+++ b/FrontEnd/src/sections/Table/MinerTable.tsx
@@ -1,95 +1,131 @@
 import React from "react";
-import { Table } from "antd";
-
+import { Table, Progress } from "antd";
 const { Column, ColumnGroup } = Table;
+import { UserMintInfo } from "@/configs/interfaces";
+import { formatPercentage, formatPrice } from "@/configs/utils";
+import { formatEther } from "viem";
+import { useTokenPrice, useETHPrice } from "@/hooks/useTokenPrice";
 
-export interface MinerDataType {
+export interface MinerTableDataType {
     key: React.Key;
-    tRank: number;
-    length: number;
-    startDay: number;
-    endDay: number;
-    power: number;
-    estToken: number;
-    tRankBonus: number;
-    cost: number;
-    value: number;
-    roi: number;
+    tRank: string;
+    length: string;
+    startDay: string;
+    endDay: string;
+    power: string;
+    estToken: string;
+    tRankBonus: string;
+    cost: string;
+    value: string;
+    roi: string;
     progress: number;
-    share: number;
-    action: number;
+    isClaimable: boolean;
+    mintInfo: UserMintInfo;
+    // share: string;
+    // action: string;
 }
 
-const MinerTable = ({ data }: { data: MinerDataType[] }) => (
-    <div className="rounded-lg overflow-hidden text-xs">
-        <Table
-            dataSource={data}
-            scroll={{ x: 1200 }}
-            bordered
-            pagination={false}
-            className="antd-costom"
-            summary={data => {
-                let estTokenAmount = 0;
-                let tRankBonus = 0;
-                let cost = 0;
-                let value = 0;
-                let roi = 0;
+const MinerTable = ({ data }: { data: MinerTableDataType[] }) => {
+    const tokenPrice = useTokenPrice();
+    const ethPrice = useETHPrice();
+    return (
+        <div className="rounded-lg overflow-hidden text-xs">
+            <Table
+                dataSource={data}
+                scroll={{ x: 1200 }}
+                bordered
+                pagination={false}
+                className="antd-costom"
+                summary={data => {
+                    let estTokenAmount = 0n;
+                    let tRankBonus = 0;
+                    let cost = 0n;
+
+                    data.forEach(({ mintInfo }) => {
+                        estTokenAmount += mintInfo.mintableTitan;
+                        tRankBonus += mintInfo.mintPowerBonus;
+                        cost += mintInfo.mintCost;
+                        // value += _value;
+                        // roi += _roi;
+                    });
+
+                    const rewardTokenValue = tokenPrice
+                        ? formatEther((estTokenAmount * tokenPrice) / BigInt(1e18))
+                        : 0n;
+                    const costEthValue = ethPrice * Number(formatEther(cost));
+                    const roi = (Number(rewardTokenValue) - costEthValue) / costEthValue;
 
-                data.forEach(
-                    ({
-                        estToken,
-                        tRankBonus: _tRankBonus,
-                        cost: _cost,
-                        value: _value,
-                        roi: _roi,
-                    }) => {
-                        estTokenAmount += estToken;
-                        tRankBonus += _tRankBonus;
-                        cost += _cost;
-                        value += _value;
-                        roi += _roi;
-                    }
-                );
-                return (
-                    <>
-                        <Table.Summary.Row>
-                            <Table.Summary.Cell index={0}>Total</Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                            <Table.Summary.Cell index={1}>{estTokenAmount}</Table.Summary.Cell>
-                            <Table.Summary.Cell index={1}>{tRankBonus}</Table.Summary.Cell>
-                            <Table.Summary.Cell index={3}> {cost} </Table.Summary.Cell>
-                            <Table.Summary.Cell index={4}> {value} </Table.Summary.Cell>
-                            <Table.Summary.Cell index={4}> {roi} </Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
-                        </Table.Summary.Row>
-                    </>
-                );
-            }}
-        >
-            <Column title="tRank" dataIndex="tRank" key="tRank" />
-            <ColumnGroup title="Miner Details">
-                <Column title="Length" dataIndex="length" key="length" />
-                <Column title="Start Day" dataIndex="startDay" key="startDay" />
-                <Column title="End Day" dataIndex="endDay" key="endDay" />
-                <Column title="Power" dataIndex="power" key="power" />
-            </ColumnGroup>
-            <Column title="Est. TITANX" dataIndex="estToken" key="estToken" />
-            <Column title="~ tRank Bonus" dataIndex="tRankBonus" key="tRankBonus" />
-            <ColumnGroup title="Miner ROI">
-                <Column title="Cost" dataIndex="cost" key="cost" />
-                <Column title="$ Value" dataIndex="value" key="value" />
-                <Column title="% ROI" dataIndex="roi" key="roi" />
-            </ColumnGroup>
-            <Column title="Progress" dataIndex="progress" key="progress" />
-            <Column title="Share" dataIndex="share" key="share" />
-            <Column title="Action" dataIndex="action" key="action" />
+                    return (
+                        <>
+                            <Table.Summary.Row>
+                                <Table.Summary.Cell index={0}>
+                                    Total({data.length})
+                                </Table.Summary.Cell>
+                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
+                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
+                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
+                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
+                                <Table.Summary.Cell index={1}>
+                                    {formatPrice(formatEther(estTokenAmount))}
+                                </Table.Summary.Cell>
+                                <Table.Summary.Cell index={1}>
+                                    {formatPrice(tRankBonus)}
+                                </Table.Summary.Cell>
+                                <Table.Summary.Cell index={3}>
+                                    {formatPrice(formatEther(cost), 4)}
+                                </Table.Summary.Cell>
+                                <Table.Summary.Cell index={4}>
+                                    {formatPrice(rewardTokenValue)}
+                                </Table.Summary.Cell>
+                                <Table.Summary.Cell index={4}>
+                                    {formatPercentage(roi, false)}
+                                </Table.Summary.Cell>
+                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
+                            </Table.Summary.Row>
+                        </>
+                    );
+                }}
+            >
+                <Column title="tRank" dataIndex="tRank" key="tRank" />
+                <ColumnGroup title="Miner Details">
+                    <Column title="Length" dataIndex="length" key="length" />
+                    <Column title="Start Day" dataIndex="startDay" key="startDay" />
+                    <Column title="End Day" dataIndex="endDay" key="endDay" />
+                    <Column title="Power" dataIndex="power" key="power" />
+                </ColumnGroup>
+                <Column title="Est. TITANX" dataIndex="estToken" key="estToken" />
+                <Column title="~ tRank Bonus" dataIndex="tRankBonus" key="tRankBonus" />
+                <ColumnGroup title="Miner ROI">
+                    <Column title="Cost" dataIndex="cost" key="cost" />
+                    <Column title="$ Value" dataIndex="value" key="value" />
+                    <Column title="% ROI" dataIndex="roi" key="roi" />
+                </ColumnGroup>
+                <Column
+                    title="Progress"
+                    dataIndex="progress"
+                    key="progress"
+                    render={(progress: number) => (
+                        <Progress
+                            percent={progress}
+                            className="w-[100px] text-[10px] m-0 mr-2"
+                            status="active"
+                        />
+                    )}
+                />
+                {/* <Column
+                title="Share"
+                dataIndex="share"
+                key="share"
+                render={(shareId: string) => <Button type="primary">{shareId}</Button>}
+            /> */}
+                {/* <Column
+                title="Action"
+                dataIndex="action"
+                key="action"
+                render={(shareId: string) => <Button type="primary">{shareId}</Button>}
+            /> */}
 
-            {/* <Column
+                {/* <Column
             title="Tags"
             title="Tags"
             dataIndex="tags"
@@ -104,8 +140,9 @@ const MinerTable = ({ data }: { data: MinerDataType[] }) => (
                 </>
             )}
         /> */}
-        </Table>
-    </div>
-);
+            </Table>
+        </div>
+    );
+};
 
 export default MinerTable;
diff --git a/changes.diff b/changes.diff
index 299f6ba..4ae401b 100644
--- a/changes.diff
+++ b/changes.diff
@@ -1,222 +1,773 @@
 diff --git a/FrontEnd/src/configs/constants.ts b/FrontEnd/src/configs/constants.ts
-index 83ef45a..524e1a7 100644
+index 524e1a7..5e7302f 100644
 --- a/FrontEnd/src/configs/constants.ts
 +++ b/FrontEnd/src/configs/constants.ts
-@@ -17,7 +17,7 @@ export const TOKEN_MANAGER_CONTRACT_CONFIT = {
- } as const;
- 
- export const TOKEN_CONTRACT_CONFIT = {
--    address: "0xA44473bbff67036d16D2B907e07d6cD49D547EF5" as `0x${string}`,
-+    address: "0xb74A068F694EbD9FC5E84413607e19Cf959143e4" as `0x${string}`,
-     // address: "0xF19308F923582A6f7c465e5CE7a9Dc1BEC6665B1" as `0x${string}`,
-     abi: token,
- } as const;
+@@ -2,7 +2,8 @@ import buyandburn from "@/abis/buyandburn.json";
+ import tokenManager from "@/abis/tokenManager.json";
+ import token from "@/abis/token.json";
+ 
+-export const SUPPORTED_CHAINS = [1, 168587773];
++// export const SUPPORTED_CHAINS = [1, 168587773];
++export const SUPPORTED_CHAINS = [168587773];
+ 
+ export const BUYANDBURN_CONTRACT_CONFIG = {
+     address: "0xD1Eb23B8a9AE7FE2426cf8093253fe17e4f604E8" as `0x${string}`,
+diff --git a/FrontEnd/src/configs/utils.ts b/FrontEnd/src/configs/utils.ts
+index ccef492..0788d30 100644
+--- a/FrontEnd/src/configs/utils.ts
++++ b/FrontEnd/src/configs/utils.ts
+@@ -21,7 +21,7 @@ export function timestampToDate(timestampBigInt: bigint) {
+     const month = String(date.getMonth() + 1).padStart(2, "0"); // getMonth() 返回0-11
+     const day = String(date.getDate()).padStart(2, "0");
+ 
+-    return `${year}/${month}/${day}`;
++    return `${month}/${day}/${year}`;
+ }
+ 
+ export function formatPrice(price: number | bigint | string, decimalPlaces: number = 2) {
+@@ -59,15 +59,37 @@ export function formatPrice(price: number | bigint | string, decimalPlaces: numb
+     return formattedPrice;
+ }
+ 
+-export function formatPercentage(value: number | bigint) {
++/**
++ * 将数字转换为百分比形式字符串。
++ * @param {number} value 要转换的数字。
++ * @param {number} decimalPlaces 保留的小数位数，默认为2。
++ * @return {string} 转换后的百分比形式字符串。
++ */
++export function formatPercentage(
++    value: number | bigint,
++    needDivBps: boolean = true,
++    decimalPlaces: number = 2
++): string {
+     const numericValue = typeof value === "bigint" ? Number(value) : value;
+-
+-    if (numericValue === 0) {
+-        return "0.00 %";
++    const percentage = numericValue * 100;
++    if (needDivBps) {
++        return `${(percentage / PERCENT_BPS).toFixed(decimalPlaces)}%`;
+     }
++    return `${percentage.toFixed(decimalPlaces)}%`;
++}
+ 
+-    // 将值转换为基本的百分比形式
+-    const percentage = numericValue / (PERCENT_BPS * 100);
+-
+-    return `${percentage.toFixed(2)} %`;
++/**
++ * 计算当前时间相对于开始和结束时间的进度。
++ *
++ * @param {number} mintStartTs 开始时间戳（秒级）。
++ * @param {number} maturityTs 结束时间戳（秒级）。
++ * @return {number} 当前进度，范围从0（未开始）到1（已结束），超出范围时按边界处理。
++ */
++export function calculateProgress(mintStartTs: number, maturityTs: number) {
++    const nowTs = Date.now() / 1000;
++    const totalDuration = maturityTs - mintStartTs;
++    const elapsedSinceStart = nowTs - mintStartTs;
++    let progress = elapsedSinceStart / totalDuration;
++    progress = Math.max(0, Math.min(1, progress));
++    return Math.round(progress * 100) / 100; // progress.toFixed(2);
+ }
+diff --git a/FrontEnd/src/configs/wagmi.ts b/FrontEnd/src/configs/wagmi.ts
+index c0a7e8e..ab593ac 100644
+--- a/FrontEnd/src/configs/wagmi.ts
++++ b/FrontEnd/src/configs/wagmi.ts
+@@ -1,13 +1,15 @@
+ import { http, createConfig } from "wagmi";
+-import { blastSepolia, mainnet } from "wagmi/chains";
++// import { blastSepolia, mainnet } from "wagmi/chains";
++import { blastSepolia } from "wagmi/chains";
+ import { injected, walletConnect } from "wagmi/connectors";
+ import { PROJECT_ID } from "./envs";
+ 
+ export const config = createConfig({
+-    chains: [mainnet, blastSepolia],
++    chains: [ blastSepolia],
++    // chains: [mainnet, blastSepolia],
+     connectors: [injected(), walletConnect({ projectId: PROJECT_ID })],
+     transports: {
+-        [mainnet.id]: http(),
++        // [mainnet.id]: http(),
+         [blastSepolia.id]: http(),
+     },
+ });
+diff --git a/FrontEnd/src/hooks/useReadTokenContract.ts b/FrontEnd/src/hooks/useReadTokenContract.ts
+index 5815e1f..fb32a80 100644
+--- a/FrontEnd/src/hooks/useReadTokenContract.ts
++++ b/FrontEnd/src/hooks/useReadTokenContract.ts
+@@ -5,6 +5,7 @@ import {
+     BUYANDBURN_CONTRACT_CONFIG,
+ } from "@/configs/constants";
+ import type { UserStakesInfo } from "@/pages/Stake";
++import { UserMint } from "@/configs/interfaces";
+ 
+ export function useGetCurrentMintCost() {
+     const { data: currentMintCost } = useReadContract({
+@@ -169,6 +170,16 @@ export function useGetUserStakes() {
+     return { userStakes: userStakes as UserStakesInfo[] };
+ }
+ 
++export function useGetUserMints() {
++    const { data: userMints } = useReadContract({
++        ...TOKEN_MANAGER_CONTRACT_CONFIT,
++        functionName: "getUserMints", // Return all mints info of an address
++        args: [useAccount()?.address],
++    });
++
++    return { userMints: userMints ? (userMints as UserMint[]) : [] };
++}
++
+ export function useGetUserETHClaimableTotal() {
+     const { data: userETHClaimableTotal } = useReadContract({
+         ...TOKEN_MANAGER_CONTRACT_CONFIT,
 diff --git a/FrontEnd/src/hooks/useWriteTokenContract.ts b/FrontEnd/src/hooks/useWriteTokenContract.ts
-index e041083..926e542 100644
+index 852922e..3bbdc28 100644
 --- a/FrontEnd/src/hooks/useWriteTokenContract.ts
 +++ b/FrontEnd/src/hooks/useWriteTokenContract.ts
-@@ -1,5 +1,5 @@
- import { useWriteContract, useAccount } from "wagmi";
--import { TOKEN_CONTRACT_CONFIT } from "@/configs/constants";
-+import { TOKEN_MANAGER_CONTRACT_CONFIT } from "@/configs/constants";
- import { parseEther } from "viem";
- 
- export function useManualDailyUpdate() {
-@@ -10,7 +10,7 @@ export function useManualDailyUpdate() {
- 
-     const manualDailyUpdate = () => {
-         writeContract({
--            ...TOKEN_CONTRACT_CONFIT,
-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-             address,
-             functionName: "manualDailyUpdate",
-         });
-@@ -18,6 +18,40 @@ export function useManualDailyUpdate() {
-     return { manualDailyUpdate };
+@@ -113,3 +113,27 @@ export function usePayouts() {
+     };
+     return { triggerPayouts, claimUserAvailableETHPayouts, claimUserAvailableETHBurnPool };
  }
- 
-+export function useStartMint() {
++
++export function useClaimMint() {
 +    const { writeContract } = useWriteContract();
 +    const { address } = useAccount();
++
 +    if (!address) return {};
 +
-+    const startMint = (power: number, length: number, inviter: string, ethCost: bigint) => {
++    const claimMint = (id: number) => {
 +        writeContract({
 +            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-+            address,
-+            functionName: "startMint",
-+            args: [power, length, inviter],
-+            value: ethCost,
++            functionName: "claimMint",
++            args: [id], // mint id
 +        });
 +    };
 +
-+    const startBatchMint = (
-+        power: number,
-+        length: number,
-+        number: number,
-+        inviter: string,
-+        ethCost: bigint
-+    ) => {
++    const batchClaimMint = () => {
 +        writeContract({
 +            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-+            address,
-+            functionName: "batchMint",
-+            args: [power, length, number, inviter],
-+            value: ethCost,
++            functionName: "batchClaimMint",
 +        });
 +    };
 +
-+    return { startMint, startBatchMint };
++    return { claimMint, batchClaimMint };
 +}
-+
- /**
-  * start a new stake
-  * @param amount
-@@ -32,7 +66,7 @@ export function useStartStake() {
- 
-     const startStake = (amount: number, numOfDays: number) => {
-         writeContract({
--            ...TOKEN_CONTRACT_CONFIT,
-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-             address,
-             functionName: "startStake",
-             args: [parseEther(String(amount)), numOfDays],
-@@ -49,7 +83,7 @@ export function useDistributeETH() {
- 
-     const distributeETH = () => {
-         writeContract({
--            ...TOKEN_CONTRACT_CONFIT,
-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-             address,
-             functionName: "distributeETH",
-         });
-@@ -65,7 +99,7 @@ export function usePayouts() {
- 
-     const triggerPayouts = () => {
-         writeContract({
--            ...TOKEN_CONTRACT_CONFIT,
-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-             address,
-             functionName: "triggerPayouts",
-         });
-@@ -73,14 +107,14 @@ export function usePayouts() {
- 
-     const claimUserAvailableETHPayouts = () => {
-         writeContract({
--            ...TOKEN_CONTRACT_CONFIT,
-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-             address,
-             functionName: "claimUserAvailableETHPayouts",
-         });
-     };
-     const claimUserAvailableETHBurnPool = () => {
-         writeContract({
--            ...TOKEN_CONTRACT_CONFIT,
-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
-             address,
-             functionName: "claimUserAvailableETHBurnPool",
-         });
 diff --git a/FrontEnd/src/pages/Mine/index.tsx b/FrontEnd/src/pages/Mine/index.tsx
-index 6c650f4..352266a 100644
+index 352266a..1ae5a58 100644
 --- a/FrontEnd/src/pages/Mine/index.tsx
 +++ b/FrontEnd/src/pages/Mine/index.tsx
-@@ -19,6 +19,7 @@ import CardBgWrapper from "@/sections/CardBgWrapper";
- import { Tooltip } from "antd";
+@@ -6,7 +6,11 @@ import CreateMiner from "./CreateMiner";
+ import type { MinerInputData } from "@/hooks/useMiningCalculator";
+ import { useWriteContract, useAccount, useBalance } from "wagmi";
+ import { TOKEN_CONTRACT_CONFIT } from "@/configs/constants";
+-import { useGetCurrentMintCost, useGetGlobalTRank } from "@/hooks/useReadTokenContract";
++import {
++    useGetCurrentMintCost,
++    useGetGlobalTRank,
++    useGetUserMints,
++} from "@/hooks/useReadTokenContract";
+ import getMineInfoDisplay from "./getMineInfoDisplay";
+ import NextDifficultIncrease from "@/sections/NextDifficultIncrease";
+ import MinerTable from "@/sections/Table/MinerTable";
+@@ -20,6 +24,8 @@ import { Tooltip } from "antd";
  import { QuestionCircleOutlined } from "@ant-design/icons";
  import { formatEther } from "viem";
-+import { useStartMint } from "@/hooks/useWriteTokenContract";
+ import { useStartMint } from "@/hooks/useWriteTokenContract";
++import { MintStatus, UserMint } from "@/configs/interfaces";
++import { calculateProgress, formatPercentage, formatPrice, timestampToDate } from "@/configs/utils";
  
  function Index() {
      const [minerData, setMinerData] = useState<MinerInputData>({
-@@ -27,7 +28,10 @@ function Index() {
-         number: 1,
-     });
- 
-+    const inviter = "0x0000000000000000000000000000000000000000";
-+
-     const openNotification = useNotification();
-+    const { startMint, startBatchMint } = useStartMint();
- 
-     const {
-         mintRewardWithBonus,
-@@ -83,28 +87,32 @@ function Index() {
-         }
-         if (type === "single" && address) {
-             try {
--                await writeContractAsync({
--                    ...TOKEN_CONTRACT_CONFIT,
--                    address,
--                    functionName: "startMint",
--                    args: [data.power, data.length],
--                    value: ethCost,
--                });
-+                if (startMint) startMint(data.power, data.length, inviter, ethCost);
-+                // await writeContractAsync({
-+                //     ...TOKEN_CONTRACT_CONFIT,
-+                //     address,
-+                //     functionName: "startMint",
-+                //     args: [data.power, data.length, inviter],
-+                //     value: ethCost,
-+                // });
-             } catch (err) {
--                console.log(err);
-+                // console.log(err);
-+                openNotification("error", "Error", err as string);
-             }
-         }
-         if (type === "batch" && address) {
-             try {
--                await writeContractAsync({
--                    ...TOKEN_CONTRACT_CONFIT,
--                    address,
--                    functionName: "batchMint",
--                    args: [data.power, data.length, data.number],
--                    value: ethCost,
--                });
-+                if (startBatchMint)
-+                    startBatchMint(data.power, data.length, data.number, inviter, ethCost);
-+                // await writeContractAsync({
-+                //     ...TOKEN_CONTRACT_CONFIT,
-+                //     address,
-+                //     functionName: "batchMint",
-+                //     args: [data.power, data.length, data.number, inviter],
-+                //     value: ethCost,
-+                // });
-             } catch (err) {
--                console.log(err);
-+                openNotification("error", "Error", err as string);
-             }
-         }
+@@ -135,6 +141,69 @@ function Index() {
+         setMinerData(data);
      };
+ 
++    const { userMints } = useGetUserMints();
++
++    const filterMints = (data: UserMint[], ethPrice: number, tokenPrice: bigint) => {
++        // const minerData = {
++        //     active: data.filter(i => i.mintInfo.status === MintStatus.ACTIVE),
++        //     claimed: data.filter(i => i.mintInfo.status === MintStatus.CLAIMED),
++        //     burned: data.filter(i => i.mintInfo.status === MintStatus.BURNED),
++        // };
++
++        console.log(ethPrice);
++
++        const activeData = data
++            .filter(i => i.mintInfo.status === MintStatus.ACTIVE)
++            .map(item => {
++                console.log(item.mintInfo.mintableTitan);
++                console.log(tokenPrice);
++
++                console.log(item.mintInfo.mintableTitan * tokenPrice);
++
++                const rewardTokenValue = formatEther(
++                    (item.mintInfo.mintableTitan * tokenPrice) / BigInt(1e18)
++                );
++                const costEthValue = ethPrice * Number(formatEther(item.mintInfo.mintCost));
++                const roi = (Number(rewardTokenValue) - costEthValue) / costEthValue;
++
++                const progress = calculateProgress(
++                    Number(item.mintInfo.mintStartTs),
++                    Number(item.mintInfo.maturityTs)
++                );
++
++                return {
++                    key: item.tRank.toString(),
++                    tRank: item.tRank.toString(),
++                    length: item.mintInfo.numOfDays.toString(),
++                    startDay: timestampToDate(item.mintInfo.mintStartTs),
++                    endDay: timestampToDate(item.mintInfo.maturityTs),
++                    power: item.mintInfo.mintPower.toString(),
++                    estToken: formatPrice(formatEther(item.mintInfo.mintableTitan)),
++                    tRankBonus: formatPrice(item.mintInfo.mintPowerBonus), // contract
++                    cost: formatPrice(formatEther(item.mintInfo.mintCost), 4),
++                    value: formatPrice(rewardTokenValue),
++                    roi: formatPercentage(roi, false),
++                    progress: progress, // 根据开始时间、当前时间、结束时间计算
++                    isClaimable: item.mintInfo.maturityTs < Date.now() / 1000,
++                    mintInfo: item.mintInfo,
++                    // share: item.tRank.toString(),
++                    // action: item.mintInfo.mintableTitan.toString(), // Claim button
++                };
++            });
++
++        return {
++            activeData,
++            claimedData: activeData.filter(item => item.isClaimable),
++            endedData: data.filter(
++                i =>
++                    i.mintInfo.status === MintStatus.CLAIMED ||
++                    i.mintInfo.status === MintStatus.BURNED
++            ),
++        };
++    };
++
++    const { activeData, claimedData } = filterMints(userMints, ethUsdPrice, tokenPrice || 0n);
++
+     return (
+         <div>
+             <ContentWrapper title="Mine" subTitle="Create your TITAN X virtual miners">
+@@ -175,26 +244,12 @@ function Index() {
+                             ))}
+                             <NextDifficultIncrease />
+                         </CardBgWrapper>
+-                        {/* <TCard number={2} className="w-full" />
+-                        <div className="absolute-top w-[88%] py-[5%]">
+-                            {mineInfoDisplay.map((item, index) => (
+-                                <>
+-                                    <TInfoGroup
+-                                        key={item.key}
+-                                        title={item.label}
+-                                        data={item.content}
+-                                    />
+-                                    {index !== mineInfoDisplay.length - 1 && <Divider />}
+-                                </>
+-                            ))}
+-                            <NextDifficultIncrease />
+-                        </div> */}
+                     </div>
+                 </div>
+                 <div className="mt-20">
+                     <TTabs>
+                         <TabPanel title="Active Miners">
+-                            <MinerTable data={[]} />
++                            <MinerTable data={activeData} />
+                         </TabPanel>
+                         <TabPanel title="Claimable Miners">
+                             <div>
+@@ -214,7 +269,7 @@ function Index() {
+                                     Batch Claim Finished Miners (Claims up to 100 at a time)
+                                 </Button>
+                             </div>
+-                            <MinerTable data={[]} />
++                            <MinerTable data={claimedData} />
+                         </TabPanel>
+                         <TabPanel title="Ended Miners">
+                             <MinerTable data={[]} />
 diff --git a/FrontEnd/src/pages/Payouts/index.tsx b/FrontEnd/src/pages/Payouts/index.tsx
-index 5174848..58fe897 100644
+index 58fe897..de7272c 100644
 --- a/FrontEnd/src/pages/Payouts/index.tsx
 +++ b/FrontEnd/src/pages/Payouts/index.tsx
-@@ -76,8 +76,6 @@ function Index() {
-             return acc;
-         }, {});
+@@ -119,7 +119,7 @@ function Index() {
+                 <Divider />
+                 <div>
+                     <p>Countdown</p>
+-                    <Progress percent={countdownPercent[dayNum] / 10} />
++                    <Progress percent={countdownPercent[dayNum] / 10} status="active" />
+                     <p>— Next Payout Day: {nextDay[dayNum].toString()}</p>
+                 </div>
+             </CardBgWrapper>
+diff --git a/FrontEnd/src/sections/CountDownProgress.tsx b/FrontEnd/src/sections/CountDownProgress.tsx
+index 5a9f0f7..89ea6b4 100644
+--- a/FrontEnd/src/sections/CountDownProgress.tsx
++++ b/FrontEnd/src/sections/CountDownProgress.tsx
+@@ -10,5 +10,5 @@ export default function CountDownProgress() {
+     const oneDay = Number(SECONDS_IN_DAY * 1000);
+     const percent = Math.round(100 - (gap * 100) / oneDay);
  
--        console.log("some change");
+-    return <Progress percent={percent} />;
++    return <Progress percent={percent} status="active" />;
+ }
+diff --git a/FrontEnd/src/sections/Table/MinerTable.tsx b/FrontEnd/src/sections/Table/MinerTable.tsx
+index efc7f0e..dbb4f37 100644
+--- a/FrontEnd/src/sections/Table/MinerTable.tsx
++++ b/FrontEnd/src/sections/Table/MinerTable.tsx
+@@ -1,95 +1,131 @@
+ import React from "react";
+-import { Table } from "antd";
 -
-         return (
-             <CardBgWrapper number={`${dayNum}Day` as CardNumber}>
-                 {/* <h2>{`${dayNum}-Day Payout Cycles`}</h2>
-diff --git a/some-changes.patch b/some-changes.patch
-deleted file mode 100644
-index b48613e..0000000
---- a/some-changes.patch
-+++ /dev/null
-@@ -1,13 +0,0 @@
++import { Table, Progress } from "antd";
+ const { Column, ColumnGroup } = Table;
++import { UserMintInfo } from "@/configs/interfaces";
++import { formatPercentage, formatPrice } from "@/configs/utils";
++import { formatEther } from "viem";
++import { useTokenPrice, useETHPrice } from "@/hooks/useTokenPrice";
+ 
+-export interface MinerDataType {
++export interface MinerTableDataType {
+     key: React.Key;
+-    tRank: number;
+-    length: number;
+-    startDay: number;
+-    endDay: number;
+-    power: number;
+-    estToken: number;
+-    tRankBonus: number;
+-    cost: number;
+-    value: number;
+-    roi: number;
++    tRank: string;
++    length: string;
++    startDay: string;
++    endDay: string;
++    power: string;
++    estToken: string;
++    tRankBonus: string;
++    cost: string;
++    value: string;
++    roi: string;
+     progress: number;
+-    share: number;
+-    action: number;
++    isClaimable: boolean;
++    mintInfo: UserMintInfo;
++    // share: string;
++    // action: string;
+ }
+ 
+-const MinerTable = ({ data }: { data: MinerDataType[] }) => (
+-    <div className="rounded-lg overflow-hidden text-xs">
+-        <Table
+-            dataSource={data}
+-            scroll={{ x: 1200 }}
+-            bordered
+-            pagination={false}
+-            className="antd-costom"
+-            summary={data => {
+-                let estTokenAmount = 0;
+-                let tRankBonus = 0;
+-                let cost = 0;
+-                let value = 0;
+-                let roi = 0;
++const MinerTable = ({ data }: { data: MinerTableDataType[] }) => {
++    const tokenPrice = useTokenPrice();
++    const ethPrice = useETHPrice();
++    return (
++        <div className="rounded-lg overflow-hidden text-xs">
++            <Table
++                dataSource={data}
++                scroll={{ x: 1200 }}
++                bordered
++                pagination={false}
++                className="antd-costom"
++                summary={data => {
++                    let estTokenAmount = 0n;
++                    let tRankBonus = 0;
++                    let cost = 0n;
++
++                    data.forEach(({ mintInfo }) => {
++                        estTokenAmount += mintInfo.mintableTitan;
++                        tRankBonus += mintInfo.mintPowerBonus;
++                        cost += mintInfo.mintCost;
++                        // value += _value;
++                        // roi += _roi;
++                    });
++
++                    const rewardTokenValue = tokenPrice
++                        ? formatEther((estTokenAmount * tokenPrice) / BigInt(1e18))
++                        : 0n;
++                    const costEthValue = ethPrice * Number(formatEther(cost));
++                    const roi = (Number(rewardTokenValue) - costEthValue) / costEthValue;
+ 
+-                data.forEach(
+-                    ({
+-                        estToken,
+-                        tRankBonus: _tRankBonus,
+-                        cost: _cost,
+-                        value: _value,
+-                        roi: _roi,
+-                    }) => {
+-                        estTokenAmount += estToken;
+-                        tRankBonus += _tRankBonus;
+-                        cost += _cost;
+-                        value += _value;
+-                        roi += _roi;
+-                    }
+-                );
+-                return (
+-                    <>
+-                        <Table.Summary.Row>
+-                            <Table.Summary.Cell index={0}>Total</Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                            <Table.Summary.Cell index={1}>{estTokenAmount}</Table.Summary.Cell>
+-                            <Table.Summary.Cell index={1}>{tRankBonus}</Table.Summary.Cell>
+-                            <Table.Summary.Cell index={3}> {cost} </Table.Summary.Cell>
+-                            <Table.Summary.Cell index={4}> {value} </Table.Summary.Cell>
+-                            <Table.Summary.Cell index={4}> {roi} </Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                            <Table.Summary.Cell index={0}></Table.Summary.Cell>
+-                        </Table.Summary.Row>
+-                    </>
+-                );
+-            }}
+-        >
+-            <Column title="tRank" dataIndex="tRank" key="tRank" />
+-            <ColumnGroup title="Miner Details">
+-                <Column title="Length" dataIndex="length" key="length" />
+-                <Column title="Start Day" dataIndex="startDay" key="startDay" />
+-                <Column title="End Day" dataIndex="endDay" key="endDay" />
+-                <Column title="Power" dataIndex="power" key="power" />
+-            </ColumnGroup>
+-            <Column title="Est. TITANX" dataIndex="estToken" key="estToken" />
+-            <Column title="~ tRank Bonus" dataIndex="tRankBonus" key="tRankBonus" />
+-            <ColumnGroup title="Miner ROI">
+-                <Column title="Cost" dataIndex="cost" key="cost" />
+-                <Column title="$ Value" dataIndex="value" key="value" />
+-                <Column title="% ROI" dataIndex="roi" key="roi" />
+-            </ColumnGroup>
+-            <Column title="Progress" dataIndex="progress" key="progress" />
+-            <Column title="Share" dataIndex="share" key="share" />
+-            <Column title="Action" dataIndex="action" key="action" />
++                    return (
++                        <>
++                            <Table.Summary.Row>
++                                <Table.Summary.Cell index={0}>
++                                    Total({data.length})
++                                </Table.Summary.Cell>
++                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
++                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
++                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
++                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
++                                <Table.Summary.Cell index={1}>
++                                    {formatPrice(formatEther(estTokenAmount))}
++                                </Table.Summary.Cell>
++                                <Table.Summary.Cell index={1}>
++                                    {formatPrice(tRankBonus)}
++                                </Table.Summary.Cell>
++                                <Table.Summary.Cell index={3}>
++                                    {formatPrice(formatEther(cost), 4)}
++                                </Table.Summary.Cell>
++                                <Table.Summary.Cell index={4}>
++                                    {formatPrice(rewardTokenValue)}
++                                </Table.Summary.Cell>
++                                <Table.Summary.Cell index={4}>
++                                    {formatPercentage(roi, false)}
++                                </Table.Summary.Cell>
++                                <Table.Summary.Cell index={0}></Table.Summary.Cell>
++                            </Table.Summary.Row>
++                        </>
++                    );
++                }}
++            >
++                <Column title="tRank" dataIndex="tRank" key="tRank" />
++                <ColumnGroup title="Miner Details">
++                    <Column title="Length" dataIndex="length" key="length" />
++                    <Column title="Start Day" dataIndex="startDay" key="startDay" />
++                    <Column title="End Day" dataIndex="endDay" key="endDay" />
++                    <Column title="Power" dataIndex="power" key="power" />
++                </ColumnGroup>
++                <Column title="Est. TITANX" dataIndex="estToken" key="estToken" />
++                <Column title="~ tRank Bonus" dataIndex="tRankBonus" key="tRankBonus" />
++                <ColumnGroup title="Miner ROI">
++                    <Column title="Cost" dataIndex="cost" key="cost" />
++                    <Column title="$ Value" dataIndex="value" key="value" />
++                    <Column title="% ROI" dataIndex="roi" key="roi" />
++                </ColumnGroup>
++                <Column
++                    title="Progress"
++                    dataIndex="progress"
++                    key="progress"
++                    render={(progress: number) => (
++                        <Progress
++                            percent={progress}
++                            className="w-[100px] text-[10px] m-0 mr-2"
++                            status="active"
++                        />
++                    )}
++                />
++                {/* <Column
++                title="Share"
++                dataIndex="share"
++                key="share"
++                render={(shareId: string) => <Button type="primary">{shareId}</Button>}
++            /> */}
++                {/* <Column
++                title="Action"
++                dataIndex="action"
++                key="action"
++                render={(shareId: string) => <Button type="primary">{shareId}</Button>}
++            /> */}
+ 
+-            {/* <Column
++                {/* <Column
+             title="Tags"
+             title="Tags"
+             dataIndex="tags"
+@@ -104,8 +140,9 @@ const MinerTable = ({ data }: { data: MinerDataType[] }) => (
+                 </>
+             )}
+         /> */}
+-        </Table>
+-    </div>
+-);
++            </Table>
++        </div>
++    );
++};
+ 
+ export default MinerTable;
+diff --git a/changes.diff b/changes.diff
+index 299f6ba..d2734f0 100644
+--- a/changes.diff
++++ b/changes.diff
+@@ -1,222 +0,0 @@
+-diff --git a/FrontEnd/src/configs/constants.ts b/FrontEnd/src/configs/constants.ts
+-index 83ef45a..524e1a7 100644
+---- a/FrontEnd/src/configs/constants.ts
+-+++ b/FrontEnd/src/configs/constants.ts
+-@@ -17,7 +17,7 @@ export const TOKEN_MANAGER_CONTRACT_CONFIT = {
+- } as const;
+- 
+- export const TOKEN_CONTRACT_CONFIT = {
+--    address: "0xA44473bbff67036d16D2B907e07d6cD49D547EF5" as `0x${string}`,
+-+    address: "0xb74A068F694EbD9FC5E84413607e19Cf959143e4" as `0x${string}`,
+-     // address: "0xF19308F923582A6f7c465e5CE7a9Dc1BEC6665B1" as `0x${string}`,
+-     abi: token,
+- } as const;
+-diff --git a/FrontEnd/src/hooks/useWriteTokenContract.ts b/FrontEnd/src/hooks/useWriteTokenContract.ts
+-index e041083..926e542 100644
+---- a/FrontEnd/src/hooks/useWriteTokenContract.ts
+-+++ b/FrontEnd/src/hooks/useWriteTokenContract.ts
+-@@ -1,5 +1,5 @@
+- import { useWriteContract, useAccount } from "wagmi";
+--import { TOKEN_CONTRACT_CONFIT } from "@/configs/constants";
+-+import { TOKEN_MANAGER_CONTRACT_CONFIT } from "@/configs/constants";
+- import { parseEther } from "viem";
+- 
+- export function useManualDailyUpdate() {
+-@@ -10,7 +10,7 @@ export function useManualDailyUpdate() {
+- 
+-     const manualDailyUpdate = () => {
+-         writeContract({
+--            ...TOKEN_CONTRACT_CONFIT,
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-             address,
+-             functionName: "manualDailyUpdate",
+-         });
+-@@ -18,6 +18,40 @@ export function useManualDailyUpdate() {
+-     return { manualDailyUpdate };
+- }
+- 
+-+export function useStartMint() {
+-+    const { writeContract } = useWriteContract();
+-+    const { address } = useAccount();
+-+    if (!address) return {};
+-+
+-+    const startMint = (power: number, length: number, inviter: string, ethCost: bigint) => {
+-+        writeContract({
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-+            address,
+-+            functionName: "startMint",
+-+            args: [power, length, inviter],
+-+            value: ethCost,
+-+        });
+-+    };
+-+
+-+    const startBatchMint = (
+-+        power: number,
+-+        length: number,
+-+        number: number,
+-+        inviter: string,
+-+        ethCost: bigint
+-+    ) => {
+-+        writeContract({
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-+            address,
+-+            functionName: "batchMint",
+-+            args: [power, length, number, inviter],
+-+            value: ethCost,
+-+        });
+-+    };
+-+
+-+    return { startMint, startBatchMint };
+-+}
+-+
+- /**
+-  * start a new stake
+-  * @param amount
+-@@ -32,7 +66,7 @@ export function useStartStake() {
+- 
+-     const startStake = (amount: number, numOfDays: number) => {
+-         writeContract({
+--            ...TOKEN_CONTRACT_CONFIT,
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-             address,
+-             functionName: "startStake",
+-             args: [parseEther(String(amount)), numOfDays],
+-@@ -49,7 +83,7 @@ export function useDistributeETH() {
+- 
+-     const distributeETH = () => {
+-         writeContract({
+--            ...TOKEN_CONTRACT_CONFIT,
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-             address,
+-             functionName: "distributeETH",
+-         });
+-@@ -65,7 +99,7 @@ export function usePayouts() {
+- 
+-     const triggerPayouts = () => {
+-         writeContract({
+--            ...TOKEN_CONTRACT_CONFIT,
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-             address,
+-             functionName: "triggerPayouts",
+-         });
+-@@ -73,14 +107,14 @@ export function usePayouts() {
+- 
+-     const claimUserAvailableETHPayouts = () => {
+-         writeContract({
+--            ...TOKEN_CONTRACT_CONFIT,
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-             address,
+-             functionName: "claimUserAvailableETHPayouts",
+-         });
+-     };
+-     const claimUserAvailableETHBurnPool = () => {
+-         writeContract({
+--            ...TOKEN_CONTRACT_CONFIT,
+-+            ...TOKEN_MANAGER_CONTRACT_CONFIT,
+-             address,
+-             functionName: "claimUserAvailableETHBurnPool",
+-         });
+-diff --git a/FrontEnd/src/pages/Mine/index.tsx b/FrontEnd/src/pages/Mine/index.tsx
+-index 6c650f4..352266a 100644
+---- a/FrontEnd/src/pages/Mine/index.tsx
+-+++ b/FrontEnd/src/pages/Mine/index.tsx
+-@@ -19,6 +19,7 @@ import CardBgWrapper from "@/sections/CardBgWrapper";
+- import { Tooltip } from "antd";
+- import { QuestionCircleOutlined } from "@ant-design/icons";
+- import { formatEther } from "viem";
+-+import { useStartMint } from "@/hooks/useWriteTokenContract";
+- 
+- function Index() {
+-     const [minerData, setMinerData] = useState<MinerInputData>({
+-@@ -27,7 +28,10 @@ function Index() {
+-         number: 1,
+-     });
+- 
+-+    const inviter = "0x0000000000000000000000000000000000000000";
+-+
+-     const openNotification = useNotification();
+-+    const { startMint, startBatchMint } = useStartMint();
+- 
+-     const {
+-         mintRewardWithBonus,
+-@@ -83,28 +87,32 @@ function Index() {
+-         }
+-         if (type === "single" && address) {
+-             try {
+--                await writeContractAsync({
+--                    ...TOKEN_CONTRACT_CONFIT,
+--                    address,
+--                    functionName: "startMint",
+--                    args: [data.power, data.length],
+--                    value: ethCost,
+--                });
+-+                if (startMint) startMint(data.power, data.length, inviter, ethCost);
+-+                // await writeContractAsync({
+-+                //     ...TOKEN_CONTRACT_CONFIT,
+-+                //     address,
+-+                //     functionName: "startMint",
+-+                //     args: [data.power, data.length, inviter],
+-+                //     value: ethCost,
+-+                // });
+-             } catch (err) {
+--                console.log(err);
+-+                // console.log(err);
+-+                openNotification("error", "Error", err as string);
+-             }
+-         }
+-         if (type === "batch" && address) {
+-             try {
+--                await writeContractAsync({
+--                    ...TOKEN_CONTRACT_CONFIT,
+--                    address,
+--                    functionName: "batchMint",
+--                    args: [data.power, data.length, data.number],
+--                    value: ethCost,
+--                });
+-+                if (startBatchMint)
+-+                    startBatchMint(data.power, data.length, data.number, inviter, ethCost);
+-+                // await writeContractAsync({
+-+                //     ...TOKEN_CONTRACT_CONFIT,
+-+                //     address,
+-+                //     functionName: "batchMint",
+-+                //     args: [data.power, data.length, data.number, inviter],
+-+                //     value: ethCost,
+-+                // });
+-             } catch (err) {
+--                console.log(err);
+-+                openNotification("error", "Error", err as string);
+-             }
+-         }
+-     };
 -diff --git a/FrontEnd/src/pages/Payouts/index.tsx b/FrontEnd/src/pages/Payouts/index.tsx
--index 58fe897..5174848 100644
+-index 5174848..58fe897 100644
 ---- a/FrontEnd/src/pages/Payouts/index.tsx
 -+++ b/FrontEnd/src/pages/Payouts/index.tsx
--@@ -76,6 +76,8 @@ function Index() {
+-@@ -76,8 +76,6 @@ function Index() {
 -             return acc;
 -         }, {});
 - 
--+        console.log("some change");
--+
+--        console.log("some change");
+--
 -         return (
 -             <CardBgWrapper number={`${dayNum}Day` as CardNumber}>
 -                 {/* <h2>{`${dayNum}-Day Payout Cycles`}</h2>
+-diff --git a/some-changes.patch b/some-changes.patch
+-deleted file mode 100644
+-index b48613e..0000000
+---- a/some-changes.patch
+-+++ /dev/null
+-@@ -1,13 +0,0 @@
+--diff --git a/FrontEnd/src/pages/Payouts/index.tsx b/FrontEnd/src/pages/Payouts/index.tsx
+--index 58fe897..5174848 100644
+----- a/FrontEnd/src/pages/Payouts/index.tsx
+--+++ b/FrontEnd/src/pages/Payouts/index.tsx
+--@@ -76,6 +76,8 @@ function Index() {
+--             return acc;
+--         }, {});
+-- 
+--+        console.log("some change");
+--+
+--         return (
+--             <CardBgWrapper number={`${dayNum}Day` as CardNumber}>
+--                 {/* <h2>{`${dayNum}-Day Payout Cycles`}</h2>
